
RETURN2=NULL
RISK2=NULL
R41=matrix(0,ncol=2 , nrow=19)
RETURN22=NULL
RISK22=NULL
for(i2 in -2:4){
  returns=RS                                                    ## matrix of returns 
  Sector=sector_matrix                                          ## Sector Matrix
  n=ncol(returns)                                               ## Stock number
  n_EUR=sum(currency_matrix[1,])                                ## nbre of EUR Stocks
  n_GBP=sum(currency_matrix[2,])                                ## nbre of GBP Stocks
  T_cost.l=matrix(0.0005,nrow=1,ncol=2*n)                       ## linear part of transaction costs
  T_cost.q=matrix(0,nrow=1,ncol=2*n)                            ## Quadratic part of transaction costs
  xiold=as.matrix(rep(0,n),nrow=n,ncol=1)                       ## current position
  lambda=10^2                                                   ## Risk aversion factor
  M.p=20*10^6*10^(i2)                                                  ## Book size limit
  M.sector=as.matrix(rep(M.p/12,nrow(sector_matrix))            ## Size limit by Sector
                     ,nrow(sector_matrix),ncol=1)               
  M.cur=as.matrix(rep(M.p/2,2),nrow=2,ncol=1)                   ## Size limit by Currency  
  norm=M.p                                                   ## to normalize the problem
  m.i=10^4
  Delta=M.p/100                                                 ## Portfolio Delta limit        
  Delta_i=as.matrix(rep(m.i,n),nrow=n,ncol=1)                  ## Stock i Delta limit
  Delta_cur=as.matrix(rep(M.p/20,2),nrow=2,ncol=1)              ## currency Delta limit           
  t.p=0.4*M.p                                                   ## Book Turnover bound
  t.i=as.matrix(rep(M.p/100,n),nrow=n,ncol=1)                   ## Stock i turnover bound
  c1=0.01 
  Q=cov(RS)                                                     ## covariance matrix.
  eps=10^(-15)
  RR=chol(Q+diag(eps,n))
  list_lambda=seq(0,5,1)
  lgth.listlam=length(list_lambda)
  bp=0.01
  cost=bp*sqrt((M.p)/Mdv2)
  

### variables upper and lower bounds  
bl_xi=-Delta_i/M.p
bl_bi_p=as.matrix(rep(0,n))
bl_bi_n=as.matrix(rep(0,n))
bl_ti_p=as.matrix(rep(0,n))
bl_ti_n=as.matrix(rep(0,n))
bl_yi= 0
bl_zi=as.matrix(rep(-Inf,n))
bl_add=as.matrix(rbind(0.5,as.matrix(rep(0,n-1))))

bl_x41=t(rbind(bl_xi,bl_bi_p,bl_bi_n,bl_ti_p,bl_ti_n,bl_yi,bl_zi,bl_add)) ## variables lower bounds   

bu_xi=Delta_i/M.p
bu_bi_p=Delta_i/M.p
bu_bi_n=Delta_i/M.p
bu_ti_p=t.i/M.p
bu_ti_n=t.i/M.p
bu_yi=Inf
bu_zi=as.matrix(rep(Inf,n))
bu_add=rbind(0.5,as.matrix(rep(Inf,n-1)))

bu_x41=t(rbind(bu_xi,bu_bi_p,bu_bi_n,bu_ti_p,bu_ti_n,bu_yi,bu_zi,bu_add)) ## variables upper bounds

###Constraint matrix####

# Weights decomposition  xi -(bi+) + (bi-) = 0
xi_bi_decomp=cbind(diag(1,n),-diag(1,n),diag(1,n),diag(0,n),diag(0,n),as.matrix(rep(0,n)),
                   diag(0,n),diag(0,n))

# turnover decomposition xi -(ti+) + (ti-) = xiold
xi_ti_decomp=cbind(diag(1,n),diag(0,n),diag(0,n),-diag(1,n),diag(1,n),as.matrix(rep(0,n)),
                   diag(0,n),diag(0,n)) 

#Book size constraint sum|xi|<M
Book_size=t(rbind(as.matrix(rep(0,n)),as.matrix(rep(1,2*n)),as.matrix(rep(0,2*n)),0,
                  as.matrix(rep(0,n)),as.matrix(rep(0,n))))

# Portfolio delta constraint |sum(xi)|< Delta 
Delta_portfo=t(rbind(as.matrix(rep(1,n)),as.matrix(rep(0,4*n)),0,as.matrix(rep(0,n)),
                     as.matrix(rep(0,n))))

# EUR booksize constraint sum(|xi_EUR|)=sum((bi_EUR+) + (bi_EUR-)) < M_EUR/norm
EUR_Booksize=t(rbind(as.matrix(rep(0,n)),as.matrix(currency_matrix[1,]),
                     as.matrix(currency_matrix[1,]),as.matrix(rep(0,2*n)),0,
                     as.matrix(rep(0,n)),as.matrix(rep(0,n))) )

# GBP booksizeconstraint sum(|xi_GBP|)=sum((bi_GBP+) + (bi_GBP-)) < M_GBP/norm                          
GBP_Booksize=t(rbind(as.matrix(rep(0,n)),as.matrix(currency_matrix[2,]),
                     as.matrix(currency_matrix[2,]),as.matrix(rep(0,2*n)),0,as.matrix(rep(0,n)),
                     as.matrix(rep(0,n))))

# Trading constraints sum(|ti|) < t.p/norm
Trading_constr=t(rbind(as.matrix(rep(0,3*n)),as.matrix(rep(1,2*n)),0,as.matrix(rep(0,n)),
                       as.matrix(rep(0,n))))

# Delta EUR portfolio constraint |sum(xi_EUR)| < Delta.EUR
Delta_EUR=t(rbind(as.matrix(currency_matrix[1,]),as.matrix(rep(0,4*n)),0,as.matrix(rep(0,n)),
                  as.matrix(rep(0,n)))) 

# Delta GBP portfolio constraint |sum(xi_GBP)| < Delta.GBP
Delta_GBP=t(rbind(as.matrix(currency_matrix[2,]),as.matrix(rep(0,4*n)),0,as.matrix(rep(0,n)),
                  as.matrix(rep(0,n)))) 

# Sector constraint sum i=1,n |xi  in Sector j|< M.sector.j for all sectors 
Sector_Size=cbind( matrix (rep(0, nrow(Sector)*n), nrow(Sector), n),Sector,Sector,
                   matrix (rep(0, nrow(Sector)*2*n), nrow(Sector), 2*n),
                   0,matrix (rep(0, nrow(Sector)*n), nrow(Sector), n), matrix (rep(0, nrow(Sector)*n), nrow(Sector), n))

# Cost constraints 
#cost_costr=t(rbind(as.matrix(rep(0,3*n)),t(T_cost.l),-1,as.matrix(rep(0,n)), as.matrix(rep(0,n))))

#Conic constraints
cone_cst=cbind(RR,diag(0,n),diag(0,n),diag(0,n),diag(0,n),as.matrix(rep(0,n)),-diag(1,n),diag(0,n))

# Constraint matrix
a41= rbind(xi_bi_decomp,xi_ti_decomp,Book_size,Delta_portfo,EUR_Booksize,GBP_Booksize,
           Trading_constr,Delta_EUR,Delta_GBP,Sector_Size,cone_cst)###constraints matrix bl_c < a%*%x < bu_c


###constraints bounds###



E41=rbind(6*n+2,6*n+3,as.matrix(seq(5*n+2,6*n+1,1)))
R=matrix(0,ncol=2 , nrow=n+1)
cqo41=list()
cqo41$sense= "min"                              ### We want to minmise qobj                                      ### The linear part of the problem
cqo41$A=Matrix(a41,byrow=TRUE,sparse=TRUE)        ### Constraints matrix
cqo41$bc=rbind(blc=bl_c41,buc=bu_c41)               ### Constraints bounds
cqo41$bx=rbind(blx=bl_x41,bux=bu_x41)               ### Variable bounds
NUMCONES = 1
cqo41$cones = matrix ( list (), nrow =2, ncol = NUMCONES )
rownames ( cqo41$cones )= c("type","sub")
cqo41$cones[ ,1] = list ("RQUAD", t(E41))


for(lambda in list_lambda){
for(i in 1:19){
  ###constraints bounds###
  
  #lower bounds
  bl_c41=t(rbind(as.matrix(rep(0,n)),xiold,0,-Delta/norm,as.matrix(rep(0,2)),0,
                 -Delta_cur/norm,as.matrix(rep(0,nrow(Sector))),as.matrix(rep(0,n))))
  #upper bounds
  bu_c41=t(rbind(as.matrix(rep(0,n)),xiold,M.p/norm,Delta/norm,M.cur/norm,t.p/norm,Delta_cur/norm,
                 M.sector/norm,as.matrix(rep(0,n))))
  
  cqo41$bc=rbind(blc=bl_c41,buc=bu_c41)
  
  ### The linear part of the problem.
f41<-t(-as.matrix(cbind(t(as.matrix(returns[20-i,])),matrix(0,nrow=1,ncol=4*n),0,matrix(0,nrow=1,ncol=n),
                        matrix(0,nrow=1,ncol=1),
                        matrix(-10^(lambda),nrow=1,ncol=1),matrix(0,nrow=1,ncol=n-2))))

cqo41$c=f41
r2=mosek(cqo41)
#plot(sort(r2$sol$itr$xx[1:n],decreasing=TRUE),type="h",ylab= "Weight value",xlab= "Stock weights",las=1)

X41=r2$sol$itr$xx[1:n]
R41[i,1]=-t(f41[1:n])%*%X41
R41[i,2]=t(X41)%*%Q%*%X41
xiold=as.matrix(X41,nrow=n)
}
mean.ret=mean(R41[,1])
mean.ris=mean(R41[,2])
RETURN2=c(RETURN2,R41[,1])
RISK2=c(RISK1,R11[,2])
RETURN22=c(RETURN22,mean.ret)
RISK22=c(RISK22,mean.ris)
}
}
R41[,1]
R41[,2]
